# -*- coding: utf-8 -*-
"""YDP_Projesi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OHfZzwsS-wocvNU-vK7GxnZIdb9G0kv9
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt

!pip install -q kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c digit-recognizer
!unzip digit-recognizer.zip

train_data = pd.read_csv('train.csv')
test_data = pd.read_csv('test.csv')

print("Eğitim verisi şekli:", train_data.shape)
print("Test verisi şekli:", test_data.shape)

X = train_data.iloc[:, 1:].values.reshape(-1, 28, 28, 1) / 255.0  # Normalizasyon
y = to_categorical(train_data['label'], num_classes=10)

X_test = test_data.values.reshape(-1, 28, 28, 1) / 255.0

from sklearn.model_selection import train_test_split
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(10, activation='softmax')  ])


model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=3, batch_size=32)

plt.figure(figsize=(6, 8))
plt.subplot(2, 1, 2)
plt.plot(history.history['accuracy'], label='Eğitim Doğruluğu')
plt.plot(history.history['val_accuracy'], label='Doğrulama Doğruluğu')
plt.legend()
plt.title('Doğruluk Grafiği')

plt.show()

plt.subplot(2, 1, 2)
plt.plot(history.history['loss'], label='Eğitim Kaybı')
plt.plot(history.history['val_loss'], label='Doğrulama Kaybı')
plt.legend()
plt.title('Kayıp Grafiği')
plt.show()

import numpy as np

# Test seti üzerinde tahmin yap
predictions = model.predict(X_test)

# Rastgele bir örneği seç ve sonucu gör
index = np.random.randint(0, len(X_test))
plt.imshow(X_test[index].reshape(28, 28), cmap='gray')



# Seçenek 1: Yalnızca tahmini göster
plt.title(f"Tahmin: {np.argmax(predictions[index])}")

# Seçenek 2: Karşılaştırma için doğrulama setini kullan
index = np.random.randint(0, len(X_val))
plt.imshow(X_val[index].reshape(28, 28), cmap='gray')
plt.title(f"Gerçek: {np.argmax(y_val[index])}, Tahmin: {np.argmax(model.predict(X_val[index].reshape(1, 28, 28, 1))[0])}")

plt.show()

import numpy as np

# Test seti üzerinde tahmin yap
predictions = model.predict(X_test)

# Rastgele bir örneği seç ve sonucu gör
index = np.random.randint(0, len(X_test))
plt.imshow(X_test[index].reshape(28, 28), cmap='gray')



# Seçenek 1: Yalnızca tahmini göster
plt.title(f"Tahmin: {np.argmax(predictions[index])}")

# Seçenek 2: Karşılaştırma için doğrulama setini kullan
index = np.random.randint(0, len(X_val))
plt.imshow(X_val[index].reshape(28, 28), cmap='gray')
plt.title(f"Gerçek: {np.argmax(y_val[index])}, Tahmin: {np.argmax(model.predict(X_val[index].reshape(1, 28, 28, 1))[0])}")

plt.show()

import numpy as np

# Test seti üzerinde tahmin yap
predictions = model.predict(X_test)

# Rastgele bir örneği seç ve sonucu gör
index = np.random.randint(0, len(X_test))
plt.imshow(X_test[index].reshape(28, 28), cmap='gray')



# Seçenek 1: Yalnızca tahmini göster
plt.title(f"Tahmin: {np.argmax(predictions[index])}")

# Seçenek 2: Karşılaştırma için doğrulama setini kullan
index = np.random.randint(0, len(X_val))
plt.imshow(X_val[index].reshape(28, 28), cmap='gray')
plt.title(f"Gerçek: {np.argmax(y_val[index])}, Tahmin: {np.argmax(model.predict(X_val[index].reshape(1, 28, 28, 1))[0])}")

plt.show()